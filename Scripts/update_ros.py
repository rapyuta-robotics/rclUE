'''
How to update ros:

- Install 'ros2' (foxy) (until section 'Build the code in the workspace') https://docs.ros.org/en/foxy/Installation/Ubuntu-Development-Setup.html
- Reinstall python package due to issues https://github.com/ros-visualization/qt_gui_core/issues/212:
sudo apt remove shiboken2 libshiboken2-dev libshiboken2-py3-5.14
pip3 install --user shiboken2
- Make replacement for ros2 to avoid LD_LIBRARY_PATH dependency issue:
src/ros2/rcpputils/src/find_library.cpp:
in function find_library_path():
---//return "";
+++return "lib" + library_name + ".so";
- Clone 'rclc' package (which is not a part of official ros2), branch 'foxy' https://github.com/ros2/rclc/tree/foxy
- Clone 'ue_msgs' (RR project) https://github.com/rapyuta-robotics/UE_msgs
- Set main arguments below and run this script

Notes:
- 1 'rviz' error at the end, 1 'Failed to find ROS1', and several 'connext' errors during ros build, and 'rviz' during 'local_setup.bash' - is okay!
- we rename SONAME of libs with version by 'patchelf' since UE4.27 can't deal with that in LinuxToolChain.cs, see more in RenameLibsWithVersion().
'''

import os, sys, shutil, re, time, subprocess
from libs_utils import *

# main arguments:
UE = "/home/vilkun/UE/UnrealEngine" # contains 'Engine' folder
ros = '/home/vilkun/ros2_foxy' # '/opt/ros/foxy/lib'
rclc = '/home/vilkun/work/build_foxy/rclc/rclc'
ue_msgs = '/home/vilkun/work/build_foxy/UE_msgs'
turtlebot3 = '/home/vilkun/work/turtlebot3-UE'
allowed_spaces = [ \
    #ue4_interfaces
    #ue_msgs
    "action_msgs", \
    "builtin_interfaces", \
    "example_interfaces", \
    "fastcdr", \
    "fastrtps", \
    "geometry_msgs", \
    "nav_msgs", \
    "rcl.", \
    "rcl_", \
    "rclc.", \
    "rcpputils", \
    "rcutils", \
    "rmw", \
    "rosgraph_msgs", \
    "rosidl", \
    "sensor_msgs", \
    "std_msgs", \
    "tf2_msgs", \
    "tracetools", \
    "unique_identifier_msgs", \
    "yaml"]
not_allowed_spaces = ['python', '.so.', 'connext']

rclUE =  turtlebot3 + '/Plugins/rclUE'
buildRosScript = rclUE + '/Scripts/build_ros_libs.sh'
rclUEBinaries = rclUE + '/Binaries'
rclUERos = rclUE + '/Source/ThirdParty/ros2lib'
rclUERosInclude = rclUERos + '/include'
rclUERosLib = rclUERos + '/lib'
rclUEBuildCS =  rclUE + '/Source/rclUE/rclUE.Build.cs'
turtlebot3Binaries = turtlebot3 + '/Binaries' 
infoRosOutput = rclUE + '/Scripts/info_ros'

# autogenerated folders
renamedSuffix = '_renamed'
rosBuild  = ros + '/build'
rosInstall  = ros + '/install'
rclcBuild = rclc + '/build'
rclcInstall = rclc + '/install'
ue_msgsBuild = ue_msgs + '/build'
ue_msgsInstall = ue_msgs + '/install'

if __name__ == "__main__":
    start = time.time()
    
    print('Building ros...')
    os.system('chmod +x ' + buildRosScript)
    os.system('bash ' + buildRosScript + ' ' + UE + ' ' + ros + ' ' + rclc + ' ' + ue_msgs)

    # See more comments inside function description
    print('\n\n\nGrabbing libs...')
    Grab(rosBuild, rosInstall, renamedSuffix, rclUERosLib, allowed_spaces)
    Grab(rclcBuild, rclcInstall, renamedSuffix, rclUERosLib, [])
    Grab(ue_msgsBuild, ue_msgsInstall, renamedSuffix, rclUERosLib, [])
    CleanDir(rclUERosLib, not_allowed_spaces)
    RenameLibsWithVersion(rclUERosLib)
    SetRPATH(rclUERosLib)
    InvalidateBinaries(turtlebot3Binaries, rclUEBinaries, rclUEBuildCS)

    # You also can try this:
    # CreateInfoForAll('objdump -x', rclUERosLib, infoRosOutput) # see also 'ldd'
    # CheckLibs(rclUERosLib)
    print('Done. Time:', '{:.2f}'.format(time.time() - start), '(sec)')