// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from
// visualization_msgs/msg/InteractiveMarker.msg - do not modify

#pragma once

// UE
#include <CoreMinimal.h>

// ROS
#include "visualization_msgs/msg/interactive_marker.h"

// rclUE
#include "Msgs/ROS2GenericMsg.h"
#include "rclcUtilities.h"

// Generated Msg/Srv/Action(can be empty)
#include "Msgs/ROS2Header.h"
#include "Msgs/ROS2IMCtrl.h"
#include "Msgs/ROS2MenuEntry.h"
#include "Msgs/ROS2Pose.h"

// Generated
#include "ROS2IM.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSIM {
  GENERATED_BODY()

public:
  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  FROSHeader Header;

  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  FROSPose Pose;

  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  FString Name;

  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  FString Description;

  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  float Scale = 0.f;

  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  TArray<FROSMenuEntry> MenuEntries;

  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  TArray<FROSIMCtrl> Controls;

  FROSIM() {}

  void
  SetFromROS2(const visualization_msgs__msg__InteractiveMarker &in_ros_data) {
    Header.SetFromROS2(in_ros_data.header);

    Pose.SetFromROS2(in_ros_data.pose);

    Name.AppendChars(in_ros_data.name.data, in_ros_data.name.size);

    Description.AppendChars(in_ros_data.description.data,
                            in_ros_data.description.size);

    Scale = in_ros_data.scale;

    for (auto i = 0; i < in_ros_data.menu_entries.size; ++i) {
      MenuEntries[i].SetFromROS2(in_ros_data.menu_entries.data[i]);
    }

    for (auto i = 0; i < in_ros_data.controls.size; ++i) {
      Controls[i].SetFromROS2(in_ros_data.controls.data[i]);
    }
  }

  void SetROS2(visualization_msgs__msg__InteractiveMarker &out_ros_data) const {
    Header.SetROS2(out_ros_data.header);

    Pose.SetROS2(out_ros_data.pose);

    {
      FTCHARToUTF8 strUtf8(*Name);
      int32 strLength = strUtf8.Length();
      out_ros_data.name.data = (decltype(out_ros_data.name.data))malloc(
          (strLength + 1) * sizeof(decltype(*out_ros_data.name.data)));
      memcpy(out_ros_data.name.data, TCHAR_TO_UTF8(*Name),
             (strLength + 1) * sizeof(char));
      out_ros_data.name.size = strLength;
      out_ros_data.name.capacity = strLength + 1;
    }

    {
      FTCHARToUTF8 strUtf8(*Description);
      int32 strLength = strUtf8.Length();
      out_ros_data.description.data =
          (decltype(out_ros_data.description.data))malloc(
              (strLength + 1) *
              sizeof(decltype(*out_ros_data.description.data)));
      memcpy(out_ros_data.description.data, TCHAR_TO_UTF8(*Description),
             (strLength + 1) * sizeof(char));
      out_ros_data.description.size = strLength;
      out_ros_data.description.capacity = strLength + 1;
    }

    out_ros_data.scale = Scale;

    out_ros_data.menu_entries.data =
        (decltype(out_ros_data.menu_entries.data))malloc(
            (MenuEntries.Num()) *
            sizeof(decltype(*out_ros_data.menu_entries.data)));

    for (auto i = 0; i < MenuEntries.Num(); ++i) {
      MenuEntries[i].SetROS2(out_ros_data.menu_entries.data[i]);
    }

    out_ros_data.menu_entries.size = MenuEntries.Num();
    out_ros_data.menu_entries.capacity = MenuEntries.Num();

    out_ros_data.controls.data = (decltype(out_ros_data.controls.data))malloc(
        (Controls.Num()) * sizeof(decltype(*out_ros_data.controls.data)));

    for (auto i = 0; i < Controls.Num(); ++i) {
      Controls[i].SetROS2(out_ros_data.controls.data[i]);
    }

    out_ros_data.controls.size = Controls.Num();
    out_ros_data.controls.capacity = Controls.Num();
  }
};

UCLASS()
class RCLUE_API UROS2IMMsg : public UROS2GenericMsg {
  GENERATED_BODY()

public:
  virtual void Init() override;
  virtual void Fini() override;

  virtual const rosidl_message_type_support_t *GetTypeSupport() const override;

  UFUNCTION(BlueprintCallable)
  void SetMsg(const FROSIM &Input);

  UFUNCTION(BlueprintCallable)
  void GetMsg(FROSIM &Output) const;

  virtual void *Get() override;

private:
  virtual FString MsgToString() const override;

  visualization_msgs__msg__InteractiveMarker interactive_marker_msg;
};