// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from sensor_msgs/msg/MultiDOFJointState.msg
// - do not modify

#pragma once

// UE
#include <CoreMinimal.h>

// ROS
#include "sensor_msgs/msg/multi_dof_joint_state.h"

// rclUE
#include "Msgs/ROS2GenericMsg.h"
#include "rclcUtilities.h"

// Generated Msg/Srv/Action(can be empty)
#include "Msgs/ROS2Header.h"
#include "Msgs/ROS2TF.h"
#include "Msgs/ROS2Twist.h"
#include "Msgs/ROS2Wrench.h"

// Generated
#include "ROS2MultiDOFJointState.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSMultiDOFJointState {
  GENERATED_BODY()

public:
  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  FROSHeader Header;

  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  TArray<FString> JointNames;

  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  TArray<FROSTF> Transforms;

  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  TArray<FROSTwist> Twist;

  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  TArray<FROSWrench> Wrench;

  FROSMultiDOFJointState() {}

  void SetFromROS2(const sensor_msgs__msg__MultiDOFJointState &in_ros_data) {
    Header.SetFromROS2(in_ros_data.header);

    for (auto i = 0; i < in_ros_data.joint_names.size; ++i) {
      JointNames.Emplace("");
      JointNames[i].AppendChars(in_ros_data.joint_names.data[i].data,
                                in_ros_data.joint_names.data[i].size);
    }

    for (auto i = 0; i < in_ros_data.transforms.size; ++i) {
      Transforms[i].SetFromROS2(in_ros_data.transforms.data[i]);
    }

    for (auto i = 0; i < in_ros_data.twist.size; ++i) {
      Twist[i].SetFromROS2(in_ros_data.twist.data[i]);
    }

    for (auto i = 0; i < in_ros_data.wrench.size; ++i) {
      Wrench[i].SetFromROS2(in_ros_data.wrench.data[i]);
    }
  }

  void SetROS2(sensor_msgs__msg__MultiDOFJointState &out_ros_data) const {
    Header.SetROS2(out_ros_data.header);

    if (out_ros_data.joint_names.data != nullptr) {
      free(out_ros_data.joint_names.data);
    }
    out_ros_data.joint_names.data =
        (decltype(out_ros_data.joint_names.data))malloc(
            (JointNames.Num()) *
            sizeof(decltype(*out_ros_data.joint_names.data)));
    for (auto i = 0; i < JointNames.Num(); ++i) {
      {
        FTCHARToUTF8 strUtf8(*JointNames[i]);
        int32 strLength = strUtf8.Length();
        if (out_ros_data.joint_names.data[i].data != nullptr) {
          free(out_ros_data.joint_names.data[i].data);
        }
        out_ros_data.joint_names.data[i].data =
            (char *)malloc((strLength + 1) * sizeof(char));
        memcpy(out_ros_data.joint_names.data[i].data,
               TCHAR_TO_UTF8(*JointNames[i]), (strLength + 1) * sizeof(char));
        out_ros_data.joint_names.data[i].size = strLength;
        out_ros_data.joint_names.data[i].capacity = strLength + 1;
      }
    }

    if (out_ros_data.transforms.data != nullptr) {
      free(out_ros_data.transforms.data);
    }
    out_ros_data.transforms.data =
        (decltype(out_ros_data.transforms.data))malloc(
            (Transforms.Num()) *
            sizeof(decltype(*out_ros_data.transforms.data)));

    for (auto i = 0; i < Transforms.Num(); ++i) {
      Transforms[i].SetROS2(out_ros_data.transforms.data[i]);
    }

    out_ros_data.transforms.size = Transforms.Num();
    out_ros_data.transforms.capacity = Transforms.Num();

    if (out_ros_data.twist.data != nullptr) {
      free(out_ros_data.twist.data);
    }
    out_ros_data.twist.data = (decltype(out_ros_data.twist.data))malloc(
        (Twist.Num()) * sizeof(decltype(*out_ros_data.twist.data)));

    for (auto i = 0; i < Twist.Num(); ++i) {
      Twist[i].SetROS2(out_ros_data.twist.data[i]);
    }

    out_ros_data.twist.size = Twist.Num();
    out_ros_data.twist.capacity = Twist.Num();

    if (out_ros_data.wrench.data != nullptr) {
      free(out_ros_data.wrench.data);
    }
    out_ros_data.wrench.data = (decltype(out_ros_data.wrench.data))malloc(
        (Wrench.Num()) * sizeof(decltype(*out_ros_data.wrench.data)));

    for (auto i = 0; i < Wrench.Num(); ++i) {
      Wrench[i].SetROS2(out_ros_data.wrench.data[i]);
    }

    out_ros_data.wrench.size = Wrench.Num();
    out_ros_data.wrench.capacity = Wrench.Num();
  }
};

UCLASS()
class RCLUE_API UROS2MultiDOFJointStateMsg : public UROS2GenericMsg {
  GENERATED_BODY()

public:
  virtual void Init() override;
  virtual void Fini() override;

  virtual const rosidl_message_type_support_t *GetTypeSupport() const override;

  UFUNCTION(BlueprintCallable)
  void SetMsg(const FROSMultiDOFJointState &Input);

  UFUNCTION(BlueprintCallable)
  void GetMsg(FROSMultiDOFJointState &Output) const;

  virtual void *Get() override;

private:
  virtual FString MsgToString() const override;

  sensor_msgs__msg__MultiDOFJointState multi_dof_joint_state_msg;
};