// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from
// trajectory_msgs/msg/JointTrajectoryPoint.msg - do not modify

#pragma once

// UE
#include <CoreMinimal.h>

// ROS
#include "trajectory_msgs/msg/joint_trajectory_point.h"

// rclUE
#include "Msgs/ROS2GenericMsg.h"
#include "rclcUtilities.h"

// Generated Msg/Srv/Action(can be empty)
#include "Msgs/ROS2Duration.h"

// Generated
#include "ROS2JointTrajPoint.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSJointTrajPoint {
  GENERATED_BODY()

public:
  UPROPERTY(EditAnywhere)
  TArray<double> Positions;

  UPROPERTY(EditAnywhere)
  TArray<double> Velocities;

  UPROPERTY(EditAnywhere)
  TArray<double> Accelerations;

  UPROPERTY(EditAnywhere)
  TArray<double> Effort;

  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  FROSDuration TimeFromStart;

  FROSJointTrajPoint() {}

  void
  SetFromROS2(const trajectory_msgs__msg__JointTrajectoryPoint &in_ros_data) {
    for (auto i = 0; i < in_ros_data.positions.size; ++i) {
      Positions.Emplace(in_ros_data.positions.data[i]);
    }

    for (auto i = 0; i < in_ros_data.velocities.size; ++i) {
      Velocities.Emplace(in_ros_data.velocities.data[i]);
    }

    for (auto i = 0; i < in_ros_data.accelerations.size; ++i) {
      Accelerations.Emplace(in_ros_data.accelerations.data[i]);
    }

    for (auto i = 0; i < in_ros_data.effort.size; ++i) {
      Effort.Emplace(in_ros_data.effort.data[i]);
    }

    TimeFromStart.SetFromROS2(in_ros_data.time_from_start);
  }

  void SetROS2(trajectory_msgs__msg__JointTrajectoryPoint &out_ros_data) const {
    if (out_ros_data.positions.data != nullptr) {
      free(out_ros_data.positions.data);
    }
    out_ros_data.positions.data = (decltype(out_ros_data.positions.data))malloc(
        (Positions.Num()) * sizeof(decltype(*out_ros_data.positions.data)));

    for (auto i = 0; i < Positions.Num(); ++i) {
      out_ros_data.positions.data[i] = Positions[i];
    }

    out_ros_data.positions.size = Positions.Num();
    out_ros_data.positions.capacity = Positions.Num();

    if (out_ros_data.velocities.data != nullptr) {
      free(out_ros_data.velocities.data);
    }
    out_ros_data.velocities.data =
        (decltype(out_ros_data.velocities.data))malloc(
            (Velocities.Num()) *
            sizeof(decltype(*out_ros_data.velocities.data)));

    for (auto i = 0; i < Velocities.Num(); ++i) {
      out_ros_data.velocities.data[i] = Velocities[i];
    }

    out_ros_data.velocities.size = Velocities.Num();
    out_ros_data.velocities.capacity = Velocities.Num();

    if (out_ros_data.accelerations.data != nullptr) {
      free(out_ros_data.accelerations.data);
    }
    out_ros_data.accelerations.data =
        (decltype(out_ros_data.accelerations.data))malloc(
            (Accelerations.Num()) *
            sizeof(decltype(*out_ros_data.accelerations.data)));

    for (auto i = 0; i < Accelerations.Num(); ++i) {
      out_ros_data.accelerations.data[i] = Accelerations[i];
    }

    out_ros_data.accelerations.size = Accelerations.Num();
    out_ros_data.accelerations.capacity = Accelerations.Num();

    if (out_ros_data.effort.data != nullptr) {
      free(out_ros_data.effort.data);
    }
    out_ros_data.effort.data = (decltype(out_ros_data.effort.data))malloc(
        (Effort.Num()) * sizeof(decltype(*out_ros_data.effort.data)));

    for (auto i = 0; i < Effort.Num(); ++i) {
      out_ros_data.effort.data[i] = Effort[i];
    }

    out_ros_data.effort.size = Effort.Num();
    out_ros_data.effort.capacity = Effort.Num();

    TimeFromStart.SetROS2(out_ros_data.time_from_start);
  }
};

UCLASS()
class RCLUE_API UROS2JointTrajPointMsg : public UROS2GenericMsg {
  GENERATED_BODY()

public:
  virtual void Init() override;
  virtual void Fini() override;

  virtual const rosidl_message_type_support_t *GetTypeSupport() const override;

  UFUNCTION(BlueprintCallable)
  void SetMsg(const FROSJointTrajPoint &Input);

  UFUNCTION(BlueprintCallable)
  void GetMsg(FROSJointTrajPoint &Output) const;

  virtual void *Get() override;

private:
  virtual FString MsgToString() const override;

  trajectory_msgs__msg__JointTrajectoryPoint joint_trajectory_point_msg;
};