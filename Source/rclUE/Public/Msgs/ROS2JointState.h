// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from sensor_msgs/msg/JointState.msg - do not
// modify

#pragma once

// UE
#include <CoreMinimal.h>

// ROS
#include "sensor_msgs/msg/joint_state.h"

// rclUE
#include "Msgs/ROS2GenericMsg.h"
#include "rclcUtilities.h"

// Generated Msg/Srv/Action(can be empty)
#include "Msgs/ROS2Header.h"

// Generated
#include "ROS2JointState.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSJointState {
  GENERATED_BODY()

public:
  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  FROSHeader Header;

  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  TArray<FString> Name;

  UPROPERTY(EditAnywhere)
  TArray<double> Position;

  UPROPERTY(EditAnywhere)
  TArray<double> Velocity;

  UPROPERTY(EditAnywhere)
  TArray<double> Effort;

  FROSJointState() {}

  void SetFromROS2(const sensor_msgs__msg__JointState &in_ros_data) {
    Header.SetFromROS2(in_ros_data.header);

    for (auto i = 0; i < in_ros_data.name.size; ++i) {
      Name.Emplace("");
      Name[i].AppendChars(in_ros_data.name.data[i].data,
                          in_ros_data.name.data[i].size);
    }

    for (auto i = 0; i < in_ros_data.position.size; ++i) {
      Position.Emplace(in_ros_data.position.data[i]);
    }

    for (auto i = 0; i < in_ros_data.velocity.size; ++i) {
      Velocity.Emplace(in_ros_data.velocity.data[i]);
    }

    for (auto i = 0; i < in_ros_data.effort.size; ++i) {
      Effort.Emplace(in_ros_data.effort.data[i]);
    }
  }

  void SetROS2(sensor_msgs__msg__JointState &out_ros_data) const {
    Header.SetROS2(out_ros_data.header);

    if (out_ros_data.name.data != nullptr) {
      free(out_ros_data.name.data);
    }
    out_ros_data.name.data = (decltype(out_ros_data.name.data))malloc(
        (Name.Num()) * sizeof(decltype(*out_ros_data.name.data)));
    for (auto i = 0; i < Name.Num(); ++i) {
      {
        FTCHARToUTF8 strUtf8(*Name[i]);
        int32 strLength = strUtf8.Length();
        if (out_ros_data.name.data[i].data != nullptr) {
          free(out_ros_data.name.data[i].data);
        }
        out_ros_data.name.data[i].data =
            (char *)malloc((strLength + 1) * sizeof(char));
        memcpy(out_ros_data.name.data[i].data, TCHAR_TO_UTF8(*Name[i]),
               (strLength + 1) * sizeof(char));
        out_ros_data.name.data[i].size = strLength;
        out_ros_data.name.data[i].capacity = strLength + 1;
      }
    }

    if (out_ros_data.position.data != nullptr) {
      free(out_ros_data.position.data);
    }
    out_ros_data.position.data = (decltype(out_ros_data.position.data))malloc(
        (Position.Num()) * sizeof(decltype(*out_ros_data.position.data)));

    for (auto i = 0; i < Position.Num(); ++i) {
      out_ros_data.position.data[i] = Position[i];
    }

    out_ros_data.position.size = Position.Num();
    out_ros_data.position.capacity = Position.Num();

    if (out_ros_data.velocity.data != nullptr) {
      free(out_ros_data.velocity.data);
    }
    out_ros_data.velocity.data = (decltype(out_ros_data.velocity.data))malloc(
        (Velocity.Num()) * sizeof(decltype(*out_ros_data.velocity.data)));

    for (auto i = 0; i < Velocity.Num(); ++i) {
      out_ros_data.velocity.data[i] = Velocity[i];
    }

    out_ros_data.velocity.size = Velocity.Num();
    out_ros_data.velocity.capacity = Velocity.Num();

    if (out_ros_data.effort.data != nullptr) {
      free(out_ros_data.effort.data);
    }
    out_ros_data.effort.data = (decltype(out_ros_data.effort.data))malloc(
        (Effort.Num()) * sizeof(decltype(*out_ros_data.effort.data)));

    for (auto i = 0; i < Effort.Num(); ++i) {
      out_ros_data.effort.data[i] = Effort[i];
    }

    out_ros_data.effort.size = Effort.Num();
    out_ros_data.effort.capacity = Effort.Num();
  }
};

UCLASS()
class RCLUE_API UROS2JointStateMsg : public UROS2GenericMsg {
  GENERATED_BODY()

public:
  virtual void Init() override;
  virtual void Fini() override;

  virtual const rosidl_message_type_support_t *GetTypeSupport() const override;

  UFUNCTION(BlueprintCallable)
  void SetMsg(const FROSJointState &Input);

  UFUNCTION(BlueprintCallable)
  void GetMsg(FROSJointState &Output) const;

  virtual void *Get() override;

private:
  virtual FString MsgToString() const override;

  sensor_msgs__msg__JointState joint_state_msg;
};