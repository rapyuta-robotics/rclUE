// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from diagnostic_msgs/msg/KeyValue.msg - do
// not modify

#pragma once

// UE
#include <CoreMinimal.h>

// ROS
#include "diagnostic_msgs/msg/key_value.h"

// rclUE
#include "Msgs/ROS2GenericMsg.h"
#include "rclcUtilities.h"

// Generated Msg/Srv/Action(can be empty)

// Generated
#include "ROS2KeyValue.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSKeyValue {
  GENERATED_BODY()

public:
  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  FString Key;

  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  FString Value;

  FROSKeyValue() {}

  void SetFromROS2(const diagnostic_msgs__msg__KeyValue &in_ros_data) {
    Key.AppendChars(in_ros_data.key.data, in_ros_data.key.size);

    Value.AppendChars(in_ros_data.value.data, in_ros_data.value.size);
  }

  void SetROS2(diagnostic_msgs__msg__KeyValue &out_ros_data) const {
    {
      FTCHARToUTF8 strUtf8(*Key);
      int32 strLength = strUtf8.Length();
      out_ros_data.key.data = (decltype(out_ros_data.key.data))malloc(
          (strLength + 1) * sizeof(decltype(*out_ros_data.key.data)));
      memcpy(out_ros_data.key.data, TCHAR_TO_UTF8(*Key),
             (strLength + 1) * sizeof(char));
      out_ros_data.key.size = strLength;
      out_ros_data.key.capacity = strLength + 1;
    }

    {
      FTCHARToUTF8 strUtf8(*Value);
      int32 strLength = strUtf8.Length();
      out_ros_data.value.data = (decltype(out_ros_data.value.data))malloc(
          (strLength + 1) * sizeof(decltype(*out_ros_data.value.data)));
      memcpy(out_ros_data.value.data, TCHAR_TO_UTF8(*Value),
             (strLength + 1) * sizeof(char));
      out_ros_data.value.size = strLength;
      out_ros_data.value.capacity = strLength + 1;
    }
  }
};

UCLASS()
class RCLUE_API UROS2KeyValueMsg : public UROS2GenericMsg {
  GENERATED_BODY()

public:
  virtual void Init() override;
  virtual void Fini() override;

  virtual const rosidl_message_type_support_t *GetTypeSupport() const override;

  UFUNCTION(BlueprintCallable)
  void SetMsg(const FROSKeyValue &Input);

  UFUNCTION(BlueprintCallable)
  void GetMsg(FROSKeyValue &Output) const;

  virtual void *Get() override;

private:
  virtual FString MsgToString() const override;

  diagnostic_msgs__msg__KeyValue key_value_msg;
};