// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from UE_msgs/SpawnEntityState.msg - do not modify

#pragma once

#include <CoreMinimal.h>

#include "ue_msgs/msg/spawn_entity_state.h"

#include "Msgs/ROS2GenericMsg.h"
#include "rclcUtilities.h"

#include "ROS2SpawnEntityStateMsg.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSSpawnEntityState
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString xml;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString state_name;

    double state_pose_position_x;
    double state_pose_position_y;
    double state_pose_position_z;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    FQuat state_pose_orientation;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    FVector state_twist_linear;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    FVector state_twist_angular;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString state_reference_frame;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> tags;

	

	void SetFromROS2(const ue_msgs__msg__SpawnEntityState& in_ros_data)
	{
    	xml.AppendChars(in_ros_data.xml.data, in_ros_data.xml.size);

		state_name.AppendChars(in_ros_data.state.name.data, in_ros_data.state.name.size);


        state_pose_position_x = in_ros_data.state.pose.position.x;
        state_pose_position_y = in_ros_data.state.pose.position.y;
        state_pose_position_z = in_ros_data.state.pose.position.z;

        state_pose_orientation.X = in_ros_data.state.pose.orientation.x;
        state_pose_orientation.Y = in_ros_data.state.pose.orientation.y;
        state_pose_orientation.Z = in_ros_data.state.pose.orientation.z;
        state_pose_orientation.W = in_ros_data.state.pose.orientation.w;

        state_twist_linear.X = in_ros_data.state.twist.linear.x;
        state_twist_linear.Y = in_ros_data.state.twist.linear.y;
        state_twist_linear.Z = in_ros_data.state.twist.linear.z;

        state_twist_angular.X = in_ros_data.state.twist.angular.x;
        state_twist_angular.Y = in_ros_data.state.twist.angular.y;
        state_twist_angular.Z = in_ros_data.state.twist.angular.z;

		state_reference_frame.AppendChars(in_ros_data.state.reference_frame.data, in_ros_data.state.reference_frame.size);

		for (int i = 0; i < in_ros_data.tags.size; i++)
		{
			tags.Add("");
			tags[i].AppendChars(in_ros_data.tags.data[i].data,in_ros_data.tags.data[i].size);
		}
		
	}

	void SetROS2(ue_msgs__msg__SpawnEntityState& out_ros_data) const
	{
    	{
			FTCHARToUTF8 strUtf8( *xml );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.xml.data != nullptr)
		{
			free(out_ros_data.xml.data);
		}
		out_ros_data.xml.data = (decltype(out_ros_data.xml.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.xml.data)));
		memcpy(out_ros_data.xml.data, TCHAR_TO_UTF8(*xml), (strLength+1)*sizeof(char));
			out_ros_data.xml.size = strLength;
			out_ros_data.xml.capacity = strLength + 1;
		}

		{
			FTCHARToUTF8 strUtf8( *state_name );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.state.name.data != nullptr)
		{
			free(out_ros_data.state.name.data);
		}
		out_ros_data.state.name.data = (decltype(out_ros_data.state.name.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.state.name.data)));
		memcpy(out_ros_data.state.name.data, TCHAR_TO_UTF8(*state_name), (strLength+1)*sizeof(char));
			out_ros_data.state.name.size = strLength;
			out_ros_data.state.name.capacity = strLength + 1;
		}

        out_ros_data.state.pose.position.x = state_pose_position_x;
        out_ros_data.state.pose.position.y = state_pose_position_y;
        out_ros_data.state.pose.position.z = state_pose_position_z;

        out_ros_data.state.pose.orientation.x = state_pose_orientation.X;
        out_ros_data.state.pose.orientation.y = state_pose_orientation.Y;
        out_ros_data.state.pose.orientation.z = state_pose_orientation.Z;
        out_ros_data.state.pose.orientation.w = state_pose_orientation.W;

        out_ros_data.state.twist.linear.x = state_twist_linear.X;
        out_ros_data.state.twist.linear.y = state_twist_linear.Y;
        out_ros_data.state.twist.linear.z = state_twist_linear.Z;

        out_ros_data.state.twist.angular.x = state_twist_angular.X;
        out_ros_data.state.twist.angular.y = state_twist_angular.Y;
        out_ros_data.state.twist.angular.z = state_twist_angular.Z;

		{
			FTCHARToUTF8 strUtf8( *state_reference_frame );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.state.reference_frame.data != nullptr)
		{
			free(out_ros_data.state.reference_frame.data);
		}
		out_ros_data.state.reference_frame.data = (decltype(out_ros_data.state.reference_frame.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.state.reference_frame.data)));
		memcpy(out_ros_data.state.reference_frame.data, TCHAR_TO_UTF8(*state_reference_frame), (strLength+1)*sizeof(char));
			out_ros_data.state.reference_frame.size = strLength;
			out_ros_data.state.reference_frame.capacity = strLength + 1;
		}

		if (out_ros_data.tags.data != nullptr)
		{
			free(out_ros_data.tags.data);
		}
		out_ros_data.tags.data = (decltype(out_ros_data.tags.data))malloc((tags.Num())*sizeof(decltype(*out_ros_data.tags.data)));
		for (int i = 0; i < tags.Num(); i++)
		{
			{
				FTCHARToUTF8 strUtf8( *tags[i] );
				int32 strLength = strUtf8.Length();
				if (out_ros_data.tags.data[i].data != nullptr)
				{
					free(out_ros_data.tags.data[i].data);
				}
				out_ros_data.tags.data[i].data = (char*)malloc((strLength+1)*sizeof(char));
				memcpy(out_ros_data.tags.data[i].data, TCHAR_TO_UTF8(*tags[i]), (strLength+1)*sizeof(char));
				out_ros_data.tags.data[i].size = strLength;
				out_ros_data.tags.data[i].capacity = strLength + 1;
			}
		}

		
	}
};

UCLASS()
class RCLUE_API UROS2SpawnEntityStateMsg : public UROS2GenericMsg
{
	GENERATED_BODY()

public:
	virtual void Init() override;
	virtual void Fini() override;

	virtual const rosidl_message_type_support_t* GetTypeSupport() const override;
	
  	UFUNCTION(BlueprintCallable)
	void SetMsg(const FROSSpawnEntityState& Input);
	
  	UFUNCTION(BlueprintCallable)
	void GetMsg(FROSSpawnEntityState& Output) const;
	
	virtual void* Get() override;

private:
	virtual FString MsgToString() const override;

	ue_msgs__msg__SpawnEntityState spawn_entity_state_msg;
};