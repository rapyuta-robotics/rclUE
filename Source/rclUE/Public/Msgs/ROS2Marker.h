// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from visualization_msgs/msg/Marker.msg - do
// not modify

#pragma once

// UE
#include <CoreMinimal.h>

// ROS
#include "visualization_msgs/msg/marker.h"

// rclUE
#include "Msgs/ROS2GenericMsg.h"
#include "rclcUtilities.h"

// Generated Msg/Srv/Action(can be empty)
#include "Msgs/ROS2ColorRGBA.h"
#include "Msgs/ROS2Duration.h"
#include "Msgs/ROS2Header.h"
#include "Msgs/ROS2Pose.h"

// Generated
#include "ROS2Marker.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSMarker {
  GENERATED_BODY()

public:
  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  FROSHeader Header;

  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  FString Ns;

  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  int Id = 0;

  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  int Type = 0;

  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  int Action = 0;

  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  FROSPose Pose;

  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  FVector Scale = FVector::ZeroVector;

  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  FROSColorRGBA Color;

  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  FROSDuration Lifetime;

  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  bool bFrameLocked = false;

  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  TArray<FVector> Points;

  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  TArray<FROSColorRGBA> Colors;

  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  FString Text;

  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  FString MeshResource;

  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  bool bMeshUseEmbeddedMaterials = false;

  FROSMarker() {}

  void SetFromROS2(const visualization_msgs__msg__Marker &in_ros_data) {
    Header.SetFromROS2(in_ros_data.header);

    Ns.AppendChars(in_ros_data.ns.data, in_ros_data.ns.size);

    Id = in_ros_data.id;

    Type = in_ros_data.type;

    Action = in_ros_data.action;

    Pose.SetFromROS2(in_ros_data.pose);

    Scale.X = in_ros_data.scale.x;
    Scale.Y = in_ros_data.scale.y;
    Scale.Z = in_ros_data.scale.z;

    Color.SetFromROS2(in_ros_data.color);

    Lifetime.SetFromROS2(in_ros_data.lifetime);

    bFrameLocked = in_ros_data.frame_locked;

    for (auto i = 0; i < in_ros_data.points.size; ++i) {
      Points.Emplace(FVector::ZeroVector);
      Points[i].X = in_ros_data.points.data[i].x;
      Points[i].Y = in_ros_data.points.data[i].y;
      Points[i].Z = in_ros_data.points.data[i].z;
    }

    for (auto i = 0; i < in_ros_data.colors.size; ++i) {
      Colors[i].SetFromROS2(in_ros_data.colors.data[i]);
    }

    Text.AppendChars(in_ros_data.text.data, in_ros_data.text.size);

    MeshResource.AppendChars(in_ros_data.mesh_resource.data,
                             in_ros_data.mesh_resource.size);

    bMeshUseEmbeddedMaterials = in_ros_data.mesh_use_embedded_materials;
  }

  void SetROS2(visualization_msgs__msg__Marker &out_ros_data) const {
    Header.SetROS2(out_ros_data.header);

    {
      FTCHARToUTF8 strUtf8(*Ns);
      int32 strLength = strUtf8.Length();
      if (out_ros_data.ns.data != nullptr) {
        free(out_ros_data.ns.data);
      }
      out_ros_data.ns.data = (decltype(out_ros_data.ns.data))malloc(
          (strLength + 1) * sizeof(decltype(*out_ros_data.ns.data)));
      memcpy(out_ros_data.ns.data, TCHAR_TO_UTF8(*Ns),
             (strLength + 1) * sizeof(char));
      out_ros_data.ns.size = strLength;
      out_ros_data.ns.capacity = strLength + 1;
    }

    out_ros_data.id = Id;

    out_ros_data.type = Type;

    out_ros_data.action = Action;

    Pose.SetROS2(out_ros_data.pose);

    out_ros_data.scale.x = Scale.X;
    out_ros_data.scale.y = Scale.Y;
    out_ros_data.scale.z = Scale.Z;

    Color.SetROS2(out_ros_data.color);

    Lifetime.SetROS2(out_ros_data.lifetime);

    out_ros_data.frame_locked = bFrameLocked;

    if (out_ros_data.points.data != nullptr) {
      free(out_ros_data.points.data);
    }
    out_ros_data.points.data = (decltype(out_ros_data.points.data))malloc(
        (Points.Num() * 3) * sizeof(decltype(*out_ros_data.points.data)));

    for (auto i = 0; i < Points.Num(); ++i) {
      out_ros_data.points.data[i].x = Points[i].X;
      out_ros_data.points.data[i].y = Points[i].Y;
      out_ros_data.points.data[i].z = Points[i].Z;
    }

    out_ros_data.points.size = Points.Num();
    out_ros_data.points.capacity = Points.Num();

    if (out_ros_data.colors.data != nullptr) {
      free(out_ros_data.colors.data);
    }
    out_ros_data.colors.data = (decltype(out_ros_data.colors.data))malloc(
        (Colors.Num()) * sizeof(decltype(*out_ros_data.colors.data)));

    for (auto i = 0; i < Colors.Num(); ++i) {
      Colors[i].SetROS2(out_ros_data.colors.data[i]);
    }

    out_ros_data.colors.size = Colors.Num();
    out_ros_data.colors.capacity = Colors.Num();

    {
      FTCHARToUTF8 strUtf8(*Text);
      int32 strLength = strUtf8.Length();
      if (out_ros_data.text.data != nullptr) {
        free(out_ros_data.text.data);
      }
      out_ros_data.text.data = (decltype(out_ros_data.text.data))malloc(
          (strLength + 1) * sizeof(decltype(*out_ros_data.text.data)));
      memcpy(out_ros_data.text.data, TCHAR_TO_UTF8(*Text),
             (strLength + 1) * sizeof(char));
      out_ros_data.text.size = strLength;
      out_ros_data.text.capacity = strLength + 1;
    }

    {
      FTCHARToUTF8 strUtf8(*MeshResource);
      int32 strLength = strUtf8.Length();
      if (out_ros_data.mesh_resource.data != nullptr) {
        free(out_ros_data.mesh_resource.data);
      }
      out_ros_data.mesh_resource.data =
          (decltype(out_ros_data.mesh_resource.data))malloc(
              (strLength + 1) *
              sizeof(decltype(*out_ros_data.mesh_resource.data)));
      memcpy(out_ros_data.mesh_resource.data, TCHAR_TO_UTF8(*MeshResource),
             (strLength + 1) * sizeof(char));
      out_ros_data.mesh_resource.size = strLength;
      out_ros_data.mesh_resource.capacity = strLength + 1;
    }

    out_ros_data.mesh_use_embedded_materials = bMeshUseEmbeddedMaterials;
  }
};

UCLASS()
class RCLUE_API UROS2MarkerMsg : public UROS2GenericMsg {
  GENERATED_BODY()

public:
  virtual void Init() override;
  virtual void Fini() override;

  virtual const rosidl_message_type_support_t *GetTypeSupport() const override;

  UFUNCTION(BlueprintCallable)
  void SetMsg(const FROSMarker &Input);

  UFUNCTION(BlueprintCallable)
  void GetMsg(FROSMarker &Output) const;

  virtual void *Get() override;

private:
  virtual FString MsgToString() const override;

  visualization_msgs__msg__Marker marker_msg;
};