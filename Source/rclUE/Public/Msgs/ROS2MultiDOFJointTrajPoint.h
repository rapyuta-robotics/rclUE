// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from
// trajectory_msgs/msg/MultiDOFJointTrajectoryPoint.msg - do not modify

#pragma once

// UE
#include <CoreMinimal.h>

// ROS
#include "trajectory_msgs/msg/multi_dof_joint_trajectory_point.h"

// rclUE
#include "Msgs/ROS2GenericMsg.h"
#include "rclcUtilities.h"

// Generated Msg/Srv/Action(can be empty)
#include "Msgs/ROS2Duration.h"
#include "Msgs/ROS2TF.h"
#include "Msgs/ROS2Twist.h"

// Generated
#include "ROS2MultiDOFJointTrajPoint.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSMultiDOFJointTrajPoint {
  GENERATED_BODY()

public:
  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  TArray<FROSTF> Transforms;

  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  TArray<FROSTwist> Velocities;

  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  TArray<FROSTwist> Accelerations;

  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  FROSDuration TimeFromStart;

  FROSMultiDOFJointTrajPoint() {}

  void SetFromROS2(
      const trajectory_msgs__msg__MultiDOFJointTrajectoryPoint &in_ros_data) {
    for (auto i = 0; i < in_ros_data.transforms.size; ++i) {
      Transforms[i].SetFromROS2(in_ros_data.transforms.data[i]);
    }

    for (auto i = 0; i < in_ros_data.velocities.size; ++i) {
      Velocities[i].SetFromROS2(in_ros_data.velocities.data[i]);
    }

    for (auto i = 0; i < in_ros_data.accelerations.size; ++i) {
      Accelerations[i].SetFromROS2(in_ros_data.accelerations.data[i]);
    }

    TimeFromStart.SetFromROS2(in_ros_data.time_from_start);
  }

  void SetROS2(
      trajectory_msgs__msg__MultiDOFJointTrajectoryPoint &out_ros_data) const {
    if (out_ros_data.transforms.data != nullptr) {
      free(out_ros_data.transforms.data);
    }
    out_ros_data.transforms.data =
        (decltype(out_ros_data.transforms.data))malloc(
            (Transforms.Num()) *
            sizeof(decltype(*out_ros_data.transforms.data)));

    for (auto i = 0; i < Transforms.Num(); ++i) {
      Transforms[i].SetROS2(out_ros_data.transforms.data[i]);
    }

    out_ros_data.transforms.size = Transforms.Num();
    out_ros_data.transforms.capacity = Transforms.Num();

    if (out_ros_data.velocities.data != nullptr) {
      free(out_ros_data.velocities.data);
    }
    out_ros_data.velocities.data =
        (decltype(out_ros_data.velocities.data))malloc(
            (Velocities.Num()) *
            sizeof(decltype(*out_ros_data.velocities.data)));

    for (auto i = 0; i < Velocities.Num(); ++i) {
      Velocities[i].SetROS2(out_ros_data.velocities.data[i]);
    }

    out_ros_data.velocities.size = Velocities.Num();
    out_ros_data.velocities.capacity = Velocities.Num();

    if (out_ros_data.accelerations.data != nullptr) {
      free(out_ros_data.accelerations.data);
    }
    out_ros_data.accelerations.data =
        (decltype(out_ros_data.accelerations.data))malloc(
            (Accelerations.Num()) *
            sizeof(decltype(*out_ros_data.accelerations.data)));

    for (auto i = 0; i < Accelerations.Num(); ++i) {
      Accelerations[i].SetROS2(out_ros_data.accelerations.data[i]);
    }

    out_ros_data.accelerations.size = Accelerations.Num();
    out_ros_data.accelerations.capacity = Accelerations.Num();

    TimeFromStart.SetROS2(out_ros_data.time_from_start);
  }
};

UCLASS()
class RCLUE_API UROS2MultiDOFJointTrajPointMsg : public UROS2GenericMsg {
  GENERATED_BODY()

public:
  virtual void Init() override;
  virtual void Fini() override;

  virtual const rosidl_message_type_support_t *GetTypeSupport() const override;

  UFUNCTION(BlueprintCallable)
  void SetMsg(const FROSMultiDOFJointTrajPoint &Input);

  UFUNCTION(BlueprintCallable)
  void GetMsg(FROSMultiDOFJointTrajPoint &Output) const;

  virtual void *Get() override;

private:
  virtual FString MsgToString() const override;

  trajectory_msgs__msg__MultiDOFJointTrajectoryPoint
      multi_dof_joint_trajectory_point_msg;
};