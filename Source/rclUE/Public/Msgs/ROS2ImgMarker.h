// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from visualization_msgs/msg/ImageMarker.msg
// - do not modify

#pragma once

// UE
#include <CoreMinimal.h>

// ROS
#include "visualization_msgs/msg/image_marker.h"

// rclUE
#include "Msgs/ROS2GenericMsg.h"
#include "rclcUtilities.h"

// Generated Msg/Srv/Action(can be empty)
#include "Msgs/ROS2ColorRGBA.h"
#include "Msgs/ROS2Duration.h"
#include "Msgs/ROS2Header.h"

// Generated
#include "ROS2ImgMarker.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSImgMarker {
  GENERATED_BODY()

public:
  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  FROSHeader Header;

  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  FString Ns;

  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  int Id = 0;

  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  int Type = 0;

  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  int Action = 0;

  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  FVector Position = FVector::ZeroVector;

  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  float Scale = 0.f;

  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  FROSColorRGBA OutlineColor;

  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  uint8 Filled = 0;

  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  FROSColorRGBA FillColor;

  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  FROSDuration Lifetime;

  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  TArray<FVector> Points;

  UPROPERTY(EditAnywhere, BlueprintReadWrite)
  TArray<FROSColorRGBA> OutlineColors;

  FROSImgMarker() {}

  void SetFromROS2(const visualization_msgs__msg__ImageMarker &in_ros_data) {
    Header.SetFromROS2(in_ros_data.header);

    Ns.AppendChars(in_ros_data.ns.data, in_ros_data.ns.size);

    Id = in_ros_data.id;

    Type = in_ros_data.type;

    Action = in_ros_data.action;

    Position.X = in_ros_data.position.x;
    Position.Y = in_ros_data.position.y;
    Position.Z = in_ros_data.position.z;

    Scale = in_ros_data.scale;

    OutlineColor.SetFromROS2(in_ros_data.outline_color);

    Filled = in_ros_data.filled;

    FillColor.SetFromROS2(in_ros_data.fill_color);

    Lifetime.SetFromROS2(in_ros_data.lifetime);

    for (auto i = 0; i < in_ros_data.points.size; ++i) {
      Points.Emplace(FVector::ZeroVector);
      Points[i].X = in_ros_data.points.data[i].x;
      Points[i].Y = in_ros_data.points.data[i].y;
      Points[i].Z = in_ros_data.points.data[i].z;
    }

    for (auto i = 0; i < in_ros_data.outline_colors.size; ++i) {
      OutlineColors[i].SetFromROS2(in_ros_data.outline_colors.data[i]);
    }
  }

  void SetROS2(visualization_msgs__msg__ImageMarker &out_ros_data) const {
    Header.SetROS2(out_ros_data.header);

    {
      FTCHARToUTF8 strUtf8(*Ns);
      int32 strLength = strUtf8.Length();
      if (out_ros_data.ns.data != nullptr) {
        free(out_ros_data.ns.data);
      }
      out_ros_data.ns.data = (decltype(out_ros_data.ns.data))malloc(
          (strLength + 1) * sizeof(decltype(*out_ros_data.ns.data)));
      memcpy(out_ros_data.ns.data, TCHAR_TO_UTF8(*Ns),
             (strLength + 1) * sizeof(char));
      out_ros_data.ns.size = strLength;
      out_ros_data.ns.capacity = strLength + 1;
    }

    out_ros_data.id = Id;

    out_ros_data.type = Type;

    out_ros_data.action = Action;

    out_ros_data.position.x = Position.X;
    out_ros_data.position.y = Position.Y;
    out_ros_data.position.z = Position.Z;

    out_ros_data.scale = Scale;

    OutlineColor.SetROS2(out_ros_data.outline_color);

    out_ros_data.filled = Filled;

    FillColor.SetROS2(out_ros_data.fill_color);

    Lifetime.SetROS2(out_ros_data.lifetime);

    if (out_ros_data.points.data != nullptr) {
      free(out_ros_data.points.data);
    }
    out_ros_data.points.data = (decltype(out_ros_data.points.data))malloc(
        (Points.Num() * 3) * sizeof(decltype(*out_ros_data.points.data)));

    for (auto i = 0; i < Points.Num(); ++i) {
      out_ros_data.points.data[i].x = Points[i].X;
      out_ros_data.points.data[i].y = Points[i].Y;
      out_ros_data.points.data[i].z = Points[i].Z;
    }

    out_ros_data.points.size = Points.Num();
    out_ros_data.points.capacity = Points.Num();

    if (out_ros_data.outline_colors.data != nullptr) {
      free(out_ros_data.outline_colors.data);
    }
    out_ros_data.outline_colors.data =
        (decltype(out_ros_data.outline_colors.data))malloc(
            (OutlineColors.Num()) *
            sizeof(decltype(*out_ros_data.outline_colors.data)));

    for (auto i = 0; i < OutlineColors.Num(); ++i) {
      OutlineColors[i].SetROS2(out_ros_data.outline_colors.data[i]);
    }

    out_ros_data.outline_colors.size = OutlineColors.Num();
    out_ros_data.outline_colors.capacity = OutlineColors.Num();
  }
};

UCLASS()
class RCLUE_API UROS2ImgMarkerMsg : public UROS2GenericMsg {
  GENERATED_BODY()

public:
  virtual void Init() override;
  virtual void Fini() override;

  virtual const rosidl_message_type_support_t *GetTypeSupport() const override;

  UFUNCTION(BlueprintCallable)
  void SetMsg(const FROSImgMarker &Input);

  UFUNCTION(BlueprintCallable)
  void GetMsg(FROSImgMarker &Output) const;

  virtual void *Get() override;

private:
  virtual FString MsgToString() const override;

  visualization_msgs__msg__ImageMarker image_marker_msg;
};