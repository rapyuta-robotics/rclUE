// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from ue_msgs/SpawnWorld.srv

#pragma once

#include "Srvs/ROS2GenericSrv.h"
#include "rclcUtilities.h"
#include "ue_msgs/srv/spawn_world.h"

#include <CoreMinimal.h>

#include "ROS2SpawnWorldSrv.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSSpawnWorldRequest
{
    GENERATED_BODY()

public:
    UPROPERTY()
    FString WorldModel;

    UPROPERTY()
    FString WorldInstanceName;

    UPROPERTY()
    double PosePositionX = 0;
    UPROPERTY()
    double PosePositionY = 0;
    UPROPERTY()
    double PosePositionZ = 0;

    UPROPERTY()
    FQuat PoseOrientation = FQuat::Identity;

    void SetFromROS2(const ue_msgs__srv__SpawnWorld_Request& in_ros_data)
    {
        WorldModel.AppendChars(in_ros_data.world_model.data, in_ros_data.world_model.size);

        WorldInstanceName.AppendChars(in_ros_data.world_instance_name.data, in_ros_data.world_instance_name.size);

        PosePositionX = in_ros_data.pose.position.x;
        PosePositionY = in_ros_data.pose.position.y;
        PosePositionZ = in_ros_data.pose.position.z;

        PoseOrientation.X = in_ros_data.pose.orientation.x;
        PoseOrientation.Y = in_ros_data.pose.orientation.y;
        PoseOrientation.Z = in_ros_data.pose.orientation.z;
        PoseOrientation.W = in_ros_data.pose.orientation.w;
    }

    void SetROS2(ue_msgs__srv__SpawnWorld_Request& out_ros_data) const
    {
        // world_model
        {
            FTCHARToUTF8 strUtf8(*WorldModel);
            int32 strLength = strUtf8.Length();
            if (out_ros_data.world_model.data != nullptr)
            {
                free(out_ros_data.world_model.data);
            }
            out_ros_data.world_model.data =
                (decltype(out_ros_data.world_model.data))malloc((strLength + 1) * sizeof(decltype(*out_ros_data.world_model.data)));
            memcpy(out_ros_data.world_model.data, TCHAR_TO_UTF8(*WorldModel), (strLength + 1) * sizeof(char));
            out_ros_data.world_model.size = strLength;
            out_ros_data.world_model.capacity = strLength + 1;
        }

        // world_instance_name
        {
            FTCHARToUTF8 strUtf8(*WorldInstanceName);
            int32 strLength = strUtf8.Length();
            if (out_ros_data.world_instance_name.data != nullptr)
            {
                free(out_ros_data.world_instance_name.data);
            }
            out_ros_data.world_instance_name.data = (decltype(out_ros_data.world_instance_name.data))malloc(
                (strLength + 1) * sizeof(decltype(*out_ros_data.world_instance_name.data)));
            memcpy(out_ros_data.world_instance_name.data, TCHAR_TO_UTF8(*WorldInstanceName), (strLength + 1) * sizeof(char));
            out_ros_data.world_instance_name.size = strLength;
            out_ros_data.world_instance_name.capacity = strLength + 1;
        }

        out_ros_data.pose.position.x = PosePositionX;
        out_ros_data.pose.position.y = PosePositionY;
        out_ros_data.pose.position.z = PosePositionZ;

        out_ros_data.pose.orientation.x = PoseOrientation.X;
        out_ros_data.pose.orientation.y = PoseOrientation.Y;
        out_ros_data.pose.orientation.z = PoseOrientation.Z;
        out_ros_data.pose.orientation.w = PoseOrientation.W;
    }
};

USTRUCT(Blueprintable)
struct RCLUE_API FROSSpawnWorldResponse
{
    GENERATED_BODY()

public:
    UPROPERTY()
    bool bSuccess;

    UPROPERTY()
    FString StatusMessage;

    void SetFromROS2(const ue_msgs__srv__SpawnWorld_Response& in_ros_data)
    {
        bSuccess = in_ros_data.success;
        StatusMessage.AppendChars(in_ros_data.status_message.data, in_ros_data.status_message.size);
    }

    void SetROS2(ue_msgs__srv__SpawnWorld_Response& out_ros_data) const
    {
        out_ros_data.success = bSuccess;

        {
            FTCHARToUTF8 strUtf8(*StatusMessage);
            int32 strLength = strUtf8.Length();
            if (out_ros_data.status_message.data != nullptr)
            {
                free(out_ros_data.status_message.data);
            }
            out_ros_data.status_message.data = (decltype(out_ros_data.status_message.data))malloc(
                (strLength + 1) * sizeof(decltype(*out_ros_data.status_message.data)));
            memcpy(out_ros_data.status_message.data, TCHAR_TO_UTF8(*StatusMessage), (strLength + 1) * sizeof(char));
            out_ros_data.status_message.size = strLength;
            out_ros_data.status_message.capacity = strLength + 1;
        }
    }
};

UCLASS()
class RCLUE_API UROS2SpawnWorldSrv : public UROS2GenericSrv
{
    GENERATED_BODY()

public:
    UFUNCTION(BlueprintCallable)
    virtual void Init() override;

    UFUNCTION(BlueprintCallable)
    virtual void Fini() override;

    virtual const rosidl_service_type_support_t* GetTypeSupport() const override;

    // used by client
    UFUNCTION(BlueprintCallable)
    void SetRequest(const FROSSpawnWorldRequest& Request);

    // used by service
    UFUNCTION(BlueprintCallable)
    void GetRequest(FROSSpawnWorldRequest& Request) const;

    // used by service
    UFUNCTION(BlueprintCallable)
    void SetResponse(const FROSSpawnWorldResponse& Response);

    // used by client
    UFUNCTION(BlueprintCallable)
    void GetResponse(FROSSpawnWorldResponse& Response) const;

    virtual void* GetRequest() override;
    virtual void* GetResponse() override;

private:
    virtual FString SrvRequestToString() const override;
    virtual FString SrvResponseToString() const override;

    ue_msgs__srv__SpawnWorld_Request SpawnWorld_req;
    ue_msgs__srv__SpawnWorld_Response SpawnWorld_res;
};
